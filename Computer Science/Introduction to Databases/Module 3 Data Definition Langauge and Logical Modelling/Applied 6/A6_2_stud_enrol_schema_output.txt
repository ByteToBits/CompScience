SQL> SET DEFINE OFF;
SQL> 
SQL> -- Place DROP commands at head of schema file
SQL> DROP TABLE course CASCADE CONSTRAINTS PURGE;

Error starting at line : 14 in command -
DROP TABLE course CASCADE CONSTRAINTS PURGE
Error report -
ORA-00942: table or view does not exist

https://docs.oracle.com/error-help/db/ora-00942/00942. 00000 -  "table or view%s does not exist"
*Cause:    The specified table or view did not exist, or a synonym
           pointed to a table or view that did not exist.
           To find existing user tables and views, query the
           ALL_TABLES and ALL_VIEWS data dictionary views. Certain
           privileges may be required to access the table. If an
           application returned this message, then the table that the
           application tried to access did not exist in the database, or
           the application did not have access to it.
*Action:   Check each of the following
           - The spelling of the table or view name is correct.
           - The referenced table or view name does exist.
           - The synonym points to an existing table or view.
SQL> DROP TABLE course_unit CASCADE CONSTRAINTS PURGE;

Error starting at line : 15 in command -
DROP TABLE course_unit CASCADE CONSTRAINTS PURGE
Error report -
ORA-00942: table or view does not exist

https://docs.oracle.com/error-help/db/ora-00942/00942. 00000 -  "table or view%s does not exist"
*Cause:    The specified table or view did not exist, or a synonym
           pointed to a table or view that did not exist.
           To find existing user tables and views, query the
           ALL_TABLES and ALL_VIEWS data dictionary views. Certain
           privileges may be required to access the table. If an
           application returned this message, then the table that the
           application tried to access did not exist in the database, or
           the application did not have access to it.
*Action:   Check each of the following
           - The spelling of the table or view name is correct.
           - The referenced table or view name does exist.
           - The synonym points to an existing table or view.
SQL> 
SQL> -- Task 1: Create New Column in UNIT Table which repesents Credit Point
SQL> --         Add Constraint where Credit Point must be 3, 6 or 12
SQL> ALTER TABLE unit ADD (
  2      unit_credit_points  NUMBER(2,0) DEFAULT 6 NOT NULL, --  Column Constraint: Default Value 6
  3      CONSTRAINT unit_credits_points_check CHECK (unit_credit_points IN (3, 6 , 12))
  4  );

Table UNIT altered.

SQL> 
SQL> COMMENT ON COLUMN unit.unit_credit_points IS 'Unit Credit Points';

Comment created.

SQL> DESC unit; -- Describe the Unit to Verify Successful Creation
SP2-0565: Illegal identifier.
SQL> 
SQL> 
SQL> -- Task 2: Create Course Table to Store Course Details
SQL> CREATE Table course (
  2      course_code          VARCHAR2(7) NOT NULL, 
  3      course_name          VARCHAR2(50) NOT NULL,
  4      course_totalpoints   NUMBER(3,0) NOT NULL
  5  );

Table COURSE created.

SQL> 
SQL> ALTER TABLE course ADD CONSTRAINT course_code_pk PRIMARY KEY (course_code);

Table COURSE altered.

SQL> 
SQL> COMMENT ON COLUMN course.course_code IS 'Course Code (Primary Key)';

Comment created.

SQL> COMMENT ON COLUMN course.course_name IS 'Course Name';

Comment created.

SQL> COMMENT ON COLUMN course.course_totalpoints IS 'Course Total Points';

Comment created.

SQL> 
SQL> -- Task 3: Create a Bridging Entity (For Unit and Course)
SQL> --         (Each course includes several units, and each unit can be part of multiple courses. 
SQL> --         For example, FIT1047 and FIT1045 are part of C2000 and C2001 courses.)
SQL> 
SQL> CREATE TABLE course_unit (
  2      course_code   VARCHAR2(7) NOT NULL, 
  3      unit_code     CHAR(7) NOT NULL
  4  );

Table COURSE_UNIT created.

SQL> 
SQL> COMMENT ON COLUMN course_unit.course_code IS 'Course Code';

Comment created.

SQL> COMMENT ON COLUMN course_unit.unit_code IS 'Unit Code';

Comment created.

SQL> 
SQL> ALTER TABLE course_unit ADD CONSTRAINT course_unit_pk PRIMARY KEY (course_code, unit_code);

Table COURSE_UNIT altered.

SQL> 
SQL> -- Task 4: Adding Foreign Keys to Course Unit 
SQL> 
SQL> ALTER TABLE course_unit 
  2     ADD CONSTRAINT courseunit_unit_fk FOREIGN KEY (unit_code)
  3         REFERENCES unit (unit_code);

Table COURSE_UNIT altered.

SQL> 
SQL> ALTER TABLE course_unit 
  2     ADD CONSTRAINT courseunit_course_fk FOREIGN KEY (course_code)
  3         REFERENCES course (course_code);

Table COURSE_UNIT altered.

SQL> 
SQL> DESC course;
Name               Null?    Type         
------------------ -------- ------------ 
COURSE_CODE        NOT NULL VARCHAR2(7)  
COURSE_NAME        NOT NULL VARCHAR2(50) 
COURSE_TOTALPOINTS NOT NULL NUMBER(3)    
SQL> DESC course_unit;
Name        Null?    Type        
----------- -------- ----------- 
COURSE_CODE NOT NULL VARCHAR2(7) 
UNIT_CODE   NOT NULL CHAR(7)     
SQL> 
SQL> SPOOL off
